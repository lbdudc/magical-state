#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages: # List of stages for jobs, and their order of execution
  - version
  - build
  - release

before_script:
  - sed -i 's/stable\/updates/stable-security\/updates/' /etc/apt/sources.list
  - apt update
  - apt install git -y

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - git fetch --tags
    - release next-version --bump-patch > .next-version
  artifacts:
    paths:
      - .next-version
  only:
    - main

compile:
  stage: build
  script:
    - echo "some artifact using version " > artifact
    - cat .next-version >> artifact
    - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
      - build_info
      - artifact
  only:
    - main

release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - git fetch --tags

    - rm -f release_info
    - mv build_info release_info
    - . release_info

    - echo -n "update version information v$RELEASE_VERSION ..."

    - release changelog
    - release commit-and-tag CHANGELOG.md release_info
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link --name release --url $RELEASE_URL --description "$RELEASE_DESC"
  only:
    - main
